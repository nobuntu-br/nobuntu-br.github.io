# ImportCsvComponent

##  Descrição
O **ImportCsvComponent** é um componente Angular responsável por importar arquivos CSV para dentro de um **SubForm**.  
Ele permite que o usuário carregue um arquivo CSV, visualize uma prévia dos dados, selecione quais colunas serão importadas e processe os dados convertendo automaticamente os tipos conforme a configuração JSON da classe (definida via `IPageStructure`).

Além disso, o componente possui mecanismos de validação que garantem que o arquivo CSV corresponda aos campos configurados no JSON, incluindo a verificação de colunas obrigatórias e a conversão de tipos de dados como `boolean`, `number`, `date` e `datetime`.

Se uma coluna com o nome `id` for incluída, o sistema atualizará o registro correspondente em vez de criar um novo.

---

## Estrutura e Interfaces

### `ImportCsvDialogData`
Define os dados recebidos pelo diálogo de importação.

```ts
export interface ImportCsvDialogData {
  className: string;
  jsonConfig: IPageStructure;
}
```

### `ImportCsvResult`
Estrutura retornada após o processo de importação.

```ts
export interface ImportCsvResult {
  data: any[];
  settings: {
    delimiter: string;
    encoding: string;
    hasHeader: boolean;
    skipEmptyLines: boolean;
    skipEmptyColumns: boolean;
  };
}
```

---

## Funcionalidades Principais

- **Upload de arquivo CSV** (arrastar e soltar ou seleção manual)
- **Detecção automática de delimitador** (`;`, `,`, `|`, `\t`)
- **Detecção de encoding** (`UTF-8`, `UTF-16LE`, etc.)
- **Visualização prévia dos dados**
- **Seleção de colunas para importação**
- **Conversão de tipos de valores** conforme o JSON de configuração
- **Validação de campos obrigatórios**
- **Geração automática de template CSV**
- **Suporte a atualização via coluna `id`**
- **Tratamento de erros e feedback visual** (barra de progresso, tooltips, mensagens de erro)

---

## Conversão de Tipos

| Tipo no JSON | Conversão no CSV | Exemplo de Valor Válido |
|---------------|------------------|--------------------------|
| `boolean` | Reconhece valores como `true`, `1`, `sim`, `on`, `ativo`, etc. | `Sim`, `false`, `0` |
| `number` | Remove formatações e converte para número. | `1.500`, `2000`, `3,14` |
| `date` | Converte formatos comuns para ISO. | `25/12/2024`, `2024-12-25` |
| `datetime` | Similar ao date, inclui hora se presente. | `25/12/2024 14:30` |
| `string` | Mantém valor original. | `Texto livre` |

---

## Propriedades

| Propriedade | Tipo | Descrição |
|--------------|------|------------|
| `importForm` | `FormGroup` | Formulário reativo que define as configurações de importação. |
| `selectedFile` | `File \| null` | Arquivo CSV atualmente selecionado. |
| `previewData` | `any[][]` | Prévia das primeiras linhas do arquivo. |
| `colsToImport` | `boolean[]` | Define quais colunas serão importadas. |
| `classAttributesNames` | `string[]` | Lista de atributos da classe (usada para gerar o template). |

---

## Métodos Principais

| Método | Descrição |
|---------|------------|
| `onFileSelected()` | Lida com o upload manual do arquivo. |
| `onDrop()` | Permite arrastar e soltar o arquivo CSV. |
| `processFile()` | Processa o conteúdo do arquivo e gera a prévia. |
| `parseCSVContent()` | Analisa o conteúdo e detecta estrutura e tipos. |
| `convertValueByType()` | Converte os valores com base no tipo do campo configurado. |
| `validateForRequiredColumns()` | Garante que o CSV contenha os campos obrigatórios. |
| `downloadTemplate()` | Gera automaticamente um modelo CSV com base na estrutura JSON. |
| `onImport()` | Finaliza o processo e retorna os dados processados para o chamador. |

---

## Exemplo de Uso

O componente é aberto via **MatDialog** a partir de outro componente, passando as informações da classe e estrutura JSON:

```ts
const dialogRef = this.dialog.open(ImportCsvComponent, {
  data: {
    className: 'Produto',
    jsonConfig: this.pageStructure
  }
});

dialogRef.afterClosed().subscribe((result: ImportCsvResult | undefined) => {
  if (result) {
    console.log('Dados importados:', result.data);
  }
});
```

---

##  Observações

- O componente **verifica automaticamente** se o arquivo CSV é válido para o subform antes de importar.
- É possível **desmarcar colunas** que não devem ser importadas.
- Caso o CSV contenha a coluna **“id”**, os registros existentes serão **atualizados**, e não criados novamente.
- Colunas não reconhecidas ou com tipos incompatíveis são tratadas e exibidas com **avisos (tooltips)**.

---

## Template CSV Gerado

Um template padrão pode ser baixado com o botão **"Baixar Template"**, gerado automaticamente com base nas colunas do JSON de configuração.

Exemplo de template gerado para a classe `Produto`:

```csv
id,nome,preco,ativo
exemplo_id,exemplo_nome,exemplo_preco,exemplo_ativo
```

---

## Dependências

- `@angular/forms`
- `@angular/material`
- `@angular/common`
- `app/shared/models/pageStructure`

---

## Autor
Desenvolvido como parte da melhoria do **SubForm Import CSV**, permitindo importação em massa de registros com controle de colunas e validações automáticas.
